//
//  Generator.swift
//  SwiftOnBalena
//
//  Created by Will Lisac on 4/29/19.
//

import Files
import Foundation

public class Generator {
    public init() { }
    
    public func generateDeviceDockerfiles() throws {
        let architectureFilter = ImageDescriptionFilter(baseType: .architecture)
        
        let imageDescriptions = try ImageDescription.imageDescriptions(for: architectureFilter)
        
        try imageDescriptions.forEach {
            try generateDeviceDockerfiles(from: $0)
        }
    }
    
    func generateDeviceDockerfiles(from imageDescription: ImageDescription) throws {
        guard case let .architecture(architecture) = imageDescription.base else {
            throw GeneratorError.invalidBaseType(file: try imageDescription.file().path)
        }
        
        let devices = Device.devices(with: architecture)
        
        try devices.forEach { device in
            try generateDockerfile(for: device, from: imageDescription)
        }
    }
    
    func generateDockerfile(for device: Device, from architectureImageDescription: ImageDescription) throws {
        guard case .architecture(_) = architectureImageDescription.base else {
            throw GeneratorError.invalidBaseType(file: try architectureImageDescription.file().path)
        }
        
        var deviceImageDescription = architectureImageDescription
        deviceImageDescription.base = .device(device)
        
        let architectureTagPrefix = "# \(architectureImageDescription.dockerTag)\n\nFROM \(architectureImageDescription.balenaFromDockerTag)\n"
        
        let deviceTagPrefix = "# Autogenerated device Dockerfile based on architecture Dockerfile: \(architectureImageDescription.dockerTag)\n\n# \(deviceImageDescription.dockerTag)\n\nFROM \(deviceImageDescription.balenaFromDockerTag)\n"
        
        let architectureDockerfileContent = try architectureImageDescription.file().readAsString()
        
        guard architectureDockerfileContent.hasPrefix(architectureTagPrefix),
            let architectureTagRange = architectureDockerfileContent.range(of: architectureTagPrefix) else {
                throw GeneratorError.invalidTagPrefix(file: try architectureImageDescription.file().path)
        }
        
        let deviceDockerfileContent = architectureDockerfileContent.replacingOccurrences(of: architectureTagPrefix,
                                                                                         with: deviceTagPrefix,
                                                                                         options: [],
                                                                                         range: architectureTagRange)
        
        try deviceImageDescription.file(createIfNeeded: true).write(string: deviceDockerfileContent)
        
        print("Generated \(deviceImageDescription.dockerTag) from \(architectureImageDescription.dockerTag)")
    }
}

public enum GeneratorError: Error, CustomStringConvertible {
    case invalidBaseType(file: String)
    case invalidTagPrefix(file: String)
    
    public var description: String {
        switch self {
        case .invalidBaseType(let file):
            return "Generator error: Invalid base type for \(file)"
        case .invalidTagPrefix(let file):
            return "Generator error: Invalid tag prefix for \(file)"
        }
    }
}
